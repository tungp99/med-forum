@startuml "Class Diagram"
left to right direction

namespace AS3 {
  namespace Modules {
    namespace Accounts {
      namespace Models {
        class Account {
          +string COLLECTION_NAME
          +string Email
          +string? Username
          +string PasswordHash
          +string RefreshToken
          +DateTime RefreshTokenExpiration
          +Profile Profile
          +bool IsGod

          +IExecutable<Post> GetWrittenPosts()
          +int GetWrittenPostsCount)
          +IExecutable<Comment> GetWrittenComments()
          +int GetWrittenCommentsCount()
        }

        class CreateAccountInput {
          +string Email
          +string? Username
          +string Password
          +ProfileInput Profile
        }

        class UpdateAccountInput {
          +string Id
          +string? Username
          +ProfileInput Profile
        }

        class Profile {
          +bool IsPublic
          +string? AvatarUrl
          +string FirstName
          +string LastName
          +string CountryCode
          +string PhoneNumber
          +DateTime? BirthDate
          +ICollection<Profession> Experience
          +ICollection<Profession> Education
          +ICollection<Qualification> Qualifications

          +string GetCountry(Profile)
        }

        class ProfileInput {
          +bool IsPublic
          +string FirstName
          +string LastName
          +string? CountryCode
          +string PhoneNumber
          +DateTime? BirthDate
        }

        class Qualification {
          +string Title
          +string IssuedBy
          +DateTime IssuedAt
          +DateTime ExpireAt
        }

        class QualificationInput {
          +string? AccountId
          +string Title
          +string IssuedBy
          +DateTime IssuedAt
          +DateTime ExpireAt
        }

        class UpdateAvatarInput {
          +string? AccountId
          +IFile File
        }

        class UpdateAvatarPayload {
          +string? AvatarUrl
        }
      }

      namespace Validators {
        class Rules {
          -IMongoCollection<Account> Collection
          +Rules(IMongoCollection<Account>)
          --
          -string _email
          +string HaveUniqueEmailErrorMsg
          +bool HaveUniqueEmail(string)
          --
          -string _username
          +string HaveUniqueUsernameErrorMsg
          +bool HaveUniqueUsername(UpdateAccountInput)
        }

        class CreateAccountInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class UpdateAccountInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class ProfileInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class UpdateAvatarInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
      }

      class Mutations {
        +Account CreateAccount(CreateAccountInput)
        +UpdateEntityPayload UpdateAccount(UpdateAccountInput)
        +DeleteEntityPayload DeleteAccount(string)
        +UpdateEntityPayload AddExperience(ProfessionInput)
        +UpdateEntityPayload RemoveExperience(ProfessionInput)
        +UpdateEntityPayload AddEducation(ProfessionInput)
        +UpdateEntityPayload RemoveEducation(ProfessionInput)
        +UpdateEntityPayload AddQualification(QualificationInput)
        +UpdateEntityPayload RemoveQualification(QualificationInput)
        +Task<UpdateAvatarPayload> UpdateAvatar(UpdateAvatarInput)
      }

      class Queries {
        +IExecutable<Account> GetAccount(string)
        +IExecutable<Account> GetAccounts()
      }

      class Schema implements IAS3Module {
        +IRequestExecutorBuilder Configure(IRequestExecutorBuilder)
      }
    }

    namespace Authentication {
      namespace Models {
        class AuthConfiguration {
          +string Key
          +string Issuer
          +string Audience
        }

        class Identity {
          +string Id
          +bool HasFullAccess
        }

        class LoginInput {
          +string? Email
          +string? Username
          +string Password
        }

        class LoginPayload {
          +string AccessToken
          +string RefreshToken
        }

        class RegisterInput {
          +string Email
          +string? Username
          +string Password
          +string ConfirmationPassword
          +ProfileInput Profile
        }

        class RefreshTokenInput {
          +string AccessToken
          +string RefreshToken
        }

        class RefreshTokenPayload {
          +bool IsSuccess
          +string AccessToken
          +string RefreshToken
        }

        class ChangePasswordInput {
          +string CurrentPassword
          +string NewPassword
          +string ConfirmNewPassword
        }
      }

      namespace Validators {
        class ChangePasswordInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class LoginInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class RegisterInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
      }

      class AuthService {
        -AuthConfiguration Config
        +AuthService(AuthConfiguration)
        +string EncryptPassword(string)
        +string GenerateAccessToken(Account)
        +string GenerateRefreshToken()
        +ClaimsPrincipal? GetClaimsFromExpiredToken(string)
      }

      class Constants {
        +string PERMISSIONS_CLAIM
        +string FULL_ACCESS
      }

      class Mutations {
        +LoginPayload Register()
        +LoginPayload Login()
        +LoginPayload AdminLogin()
        +RefreshTokenPayload RefreshAccessToken()
        +UpdateEntityPayload ChangePassword()
      }

      class Queries {
        +IExecutable<Account> GetMe()
      }

      class Subscriptions {
        {static} -int ONLINE_COUNT
        +int AuthenticationStatistics()
        +int AccountCreated()
      }


      class Schema implements IAS3Module {
        +IRequestExecutorBuilder Configure(IRequestExecutorBuilder)
      }
    }

    namespace Posts {
      namespace Models {
        class Post {
          +string COLLECTION_NAME
          +string Title
          +string MarkdownContent
          +bool IsPublished
          +int Score
          +string CreatorAccountId
          +Rating Rating
          +IExecutable<Account> GetCreatorAccount()
          +IExecutable<Comment> GetComments()
          +int GetCommentsCount()
        }

        class CreatePostInput {
          +string Title
          +string MarkdownContent
          +bool IsPublished
        }

        class UpdatePostInput {
          +string Id
          +string Title
          +string MarkdownContent
          +bool IsPublished
        }

        class RatePostInput {
          +string PostId
          +Rating.Quality Quality
        }

        class RatePostPayload {
          +string PostId
          +Rating.Quality Quality
        }
      }

      namespace Validators {
        class CreatePostInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class UpdatePostInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class RatePostInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
      }

      class Mutations {
        +Post CreatePost(CreatePostInput)
        +UpdateEntityPayload UpdatePost(UpdatePostInput)
        +DeleteEntityPayload DeletePost(string)
        +RatePostPayload RatePost(RatePostInput)
      }

      class Queries {
        +IExecutable<Post> GetPosts(string)
        +IExecutable<Post> GetPost(string)
      }

      class Schema implements IAS3Module {
        +IRequestExecutorBuilder Configure(IRequestExecutorBuilder)
      }
    }

    namespace Comments {
      namespace Models {
        class Comment {
          +string COLLECTION_NAME
          +string MarkdownContent
          +int Score
          +string PostId
          +string CreatorAccountId
          +string? ReplyToCommentId
          +Rating Rating
          +IExecutable<Post> GetPost()
          +IExecutable<Account> GetCreatorAccount()
          +int GetRepliesCount()
        }

        class CreateCommentInput {
          +string MarkdownContent
          +string PostId
          +string? ReplyToCommentId
        }

        class UpdateCommentInput {
          +string Id
          +string MarkdownContent
        }

        class RateCommentInput {
          +string CommentId
          +Rating.Quality Quality
        }

        class RateCommentPayload {
          +string CommentId
          +Rating.Quality Quality
        }
      }

      namespace Validators {
        class Rules{
          -IMongoCollection<Comment> Collection
          +Rules(IMongoCollection<Comment>)
          --
          -string _parentId
          +string HaveParentCommentErrorMsg
          +bool HaveParentComment(string)
        }

        class CreateCommentInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class UpdateCommentInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class RateCommentInputValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
      }

      class Mutations {
        +Comment CreateComment(CreateCommentInput)
        +UpdateEntityPayload UpdateComment(UpdateCommentInput)
        +DeleteEntityPayload DeleteComment(string)
        +RateCommentPayload RateComment(RateCommentInput)
      }

      class Queries {
        +IExecutable<Comment> GetComments(string)
        +IExecutable<Comment> GetReplies(string)
      }

      class Schema implements IAS3Module {
        +IRequestExecutorBuilder Configure(IRequestExecutorBuilder)
      }
    }
  }

  namespace System {
    class ServiceExtension {
      {static} +IServiceCollection AddAS3Authentication(AuthConfiguration)
      {static} +IServiceCollection AddAS3MongoDB(DatabaseConfiguration)
      {static} +IServiceCollection AddFluentValidation()
      {static} +IServiceCollection AddAS3GraphQL()
      {static} +IRequestExecutorBuilder AddGraphQLModule()
    }

    namespace Amazon {
      class AmzS3Config {
        +string BucketName
        +string AccessKeyId
        +string AccessKeySecret
      }

      class AmzS3Service {
        -AmzS3Config Config
        -AmazonS3Client Client
        +Task UploadFile(string, Stream)
      }
    }

    namespace GraphQL {
      namespace Authentication {
        class IdentityGlobalStateAttribute extends GlobalStateAttribute

        class IdentityRequestInterceptor extends DefaultHttpRequestInterceptor {
          +ValueTask OnCreateAsync()
        }
      }

      namespace Models {
        class UpdateEntityPayload {
          +bool IsSuccess
          +int AffectedRecords
        }

        class DeleteEntityPayload {
          +bool IsSuccess
          +int AffectedRecords
        }

        enum Quality {
          GOOD
          BAD
        }

        class Rating {
          +ICollection<string> UpvoterAccountIndexes
          +ICollection<string> DownvoterAccountIndexes
        }
      }

      namespace Validators {
        class AS3Rules {
          +string HUMAN_NAME_REGEX
        }

        class KeyExistenceValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class OptionalPasswordValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
        class PasswordValidator extends AbstractValidator implements IExplicitUsageOnlyValidator
      }

      class ErrorFilter implements IErrorFilter {
        +IError OnError(IError)
      }

      class HttpSerializer extends DefaultHttpResultSerializer {
        +HttpStatusCode GetStatusCode(IExecutionResult)
      }

      interface IAS3Module {
        IRequestExecutorBuilder Configure(IRequestExecutorBuilder
      }
    }

    namespace MongoDB {
      abstract class BaseEntity {
        +string Id
        +DateTime CreatedAt
        +DateTime UpdatedAt
      }

      class DatabaseConfiguration {
        +string ConnectionString
        +string Name
      }
    }
  }
}


@enduml
